// <auto-generated />
using System;
using Flow.Infrastructure.Storage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Flow.Infrastructure.Storage.Migrations.Migrations
{
    [DbContext(typeof(FlowDbContext))]
    partial class FlowDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Flow.Domain.Transactions.AccountInfo", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Bank")
                        .HasColumnType("text");

                    b.HasKey("Name", "Bank");

                    b.ToTable("AccountInfo");
                });

            modelBuilder.Entity("Flow.Domain.Transactions.RecordedTransaction", b =>
                {
                    b.Property<long>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("account_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("bank_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.HasIndex("account_name", "bank_name");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Flow.Domain.Transactions.RecordedTransaction", b =>
                {
                    b.HasOne("Flow.Domain.Transactions.AccountInfo", null)
                        .WithMany()
                        .HasForeignKey("account_name", "bank_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Flow.Domain.Transactions.Overrides", "Overrides", b1 =>
                        {
                            b1.Property<long>("RecordedTransactionKey")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("Category")
                                .HasColumnType("text");

                            b1.Property<string>("Comment")
                                .HasColumnType("text");

                            b1.Property<string>("Title")
                                .HasColumnType("text");

                            b1.HasKey("RecordedTransactionKey");

                            b1.ToTable("Transactions");

                            b1.WithOwner()
                                .HasForeignKey("RecordedTransactionKey");
                        });

                    b.Navigation("Overrides");
                });
#pragma warning restore 612, 618
        }
    }
}
